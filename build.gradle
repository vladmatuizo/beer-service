plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file("build/generated-snippets")
    mapstructVersion = "1.5.5.Final"
}

dependencies {
    asciidoctorExtensions  'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'
    implementation 'org.liquibase:liquibase-core'
    implementation 'javax.cache:cache-api'
    implementation ('org.ehcache:ehcache') {
        capabilities {
            requireCapability('org.ehcache:ehcache-jakarta')
        }
    }

    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'com.h2database:h2'
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    configurations "asciidoctorExtensions"
    inputs.dir snippetsDir
    outputDir "build/generated-docs"
    sourceDir "src/main/asciidoc"
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

task downloadDependencies() {
    description 'Download all dependencies to the Gradle cache'
    doLast {
        configurations.findAll { it.canBeResolved }.files
    }
}
